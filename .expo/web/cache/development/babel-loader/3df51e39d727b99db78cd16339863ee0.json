{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _jsxFileName = \"/Users/lanedator/Documents/GitHub/ExamenProject/src/screens/highscoreScreen.js\",\n    _this2 = this;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useContext, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { Cache } from 'react-native-cache';\nimport { AsyncStorage } from \"react-native-web/dist/index\";\nimport NetInfo from '@react-native-community/netinfo';\nimport { GetHighScoreList } from \"../firebase/Firebase\";\nimport { ThemeContext } from \"../context/ThemeContext\";\nexport default function HighScore() {\n  var _this = this;\n\n  var _useContext = useContext(ThemeContext),\n      theme = _useContext.theme;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      highScorePlayers = _useState2[0],\n      setHighScorePlayers = _useState2[1];\n\n  useEffect(function () {\n    NetInfo.fetch().then(function (networkState) {\n      console.log('Connection type - ', networkState.type);\n      console.log('Is connected? - ', networkState.isConnected);\n    });\n\n    if (networkState.isConnected === true) {\n      GetHighScoreList(setHighScorePlayers);\n    }\n  }, []);\n  var cache = new Cache({\n    namespace: 'myapp',\n    policy: {\n      maxEntries: 50000\n    },\n    backend: AsyncStorage\n  });\n\n  var Caching = function Caching() {\n    return _regeneratorRuntime.async(function Caching$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var ReadCaching = function ReadCaching() {\n    var entries;\n    return _regeneratorRuntime.async(function ReadCaching$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(cache.getAll());\n\n          case 2:\n            entries = _context2.sent;\n            console.log('all cach', entries.key1.value);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(LinearGradient, {\n    colors: theme.linearBackgroundColor,\n    style: _objectSpread(_objectSpread({}, styles.container), {}, {\n      backgroundColor: theme.backgroundColor\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: _objectSpread(_objectSpread({}, styles.title), {}, {\n      color: theme.color\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, \"HighScore\"), React.createElement(Button, {\n    title: \"cach\",\n    onPress: function onPress() {\n      Caching();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }), React.createElement(Button, {\n    title: \"read cach\",\n    onPress: function onPress() {\n      ReadCaching();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }), React.createElement(Button, {\n    title: \"delete\",\n    onPress: function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(cache.clearAll());\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  })), React.createElement(View, {\n    style: {\n      position: 'relative',\n      top: '20%',\n      width: '80%',\n      flexDirection: 'row',\n      justifyContent: 'space-between'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: {\n      fontSize: 30,\n      fontWeight: 'bold',\n      color: theme.color\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, \"Namn\"), React.createElement(Text, {\n    style: {\n      fontSize: 30,\n      fontWeight: 'bold',\n      color: theme.color\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, \"Score\")), highScorePlayers.map(function (element, index) {\n    return React.createElement(HighScoreView, {\n      key: index,\n      element: element,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }\n    });\n  }));\n}\n\nvar HighScoreView = function HighScoreView(_ref) {\n  var element = _ref.element;\n\n  var _useContext2 = useContext(ThemeContext),\n      theme = _useContext2.theme;\n\n  return React.createElement(View, {\n    style: {\n      flexDirection: 'row',\n      width: '80%',\n      position: 'relative',\n      top: '25%',\n      justifyContent: 'space-between'\n    },\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: {},\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: _objectSpread(_objectSpread({}, styles.userName), {}, {\n      color: theme.color\n    }),\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, element.name)), React.createElement(View, {\n    style: {\n      marginRight: 30\n    },\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: _objectSpread(_objectSpread({}, styles.userScore), {}, {\n      color: theme.color\n    }),\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, element.score)));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#146B66',\n    alignItems: 'center'\n  },\n  title: {\n    fontSize: 40,\n    fontWeight: 'bold',\n    marginTop: 15\n  },\n  userName: {\n    fontSize: 22,\n    fontWeight: '600'\n  },\n  userScore: {\n    fontSize: 22,\n    fontWeight: '600'\n  }\n});","map":{"version":3,"sources":["/Users/lanedator/Documents/GitHub/ExamenProject/src/screens/highscoreScreen.js"],"names":["React","useState","useContext","useEffect","LinearGradient","Cache","AsyncStorage","NetInfo","GetHighScoreList","ThemeContext","HighScore","theme","highScorePlayers","setHighScorePlayers","fetch","then","networkState","console","log","type","isConnected","cache","namespace","policy","maxEntries","backend","Caching","ReadCaching","getAll","entries","key1","value","linearBackgroundColor","styles","container","backgroundColor","title","color","clearAll","position","top","width","flexDirection","justifyContent","fontSize","fontWeight","map","element","index","HighScoreView","userName","name","marginRight","userScore","score","StyleSheet","create","flex","alignItems","marginTop"],"mappings":";;;;;;;;;;;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;;;;;AAEA,SAASC,cAAT,QAA+B,sBAA/B;AACA,SAASC,KAAT,QAAsB,oBAAtB;SACSC,Y;AACT,OAAOC,OAAP,MAAoB,iCAApB;AAGA,SAASC,gBAAT;AAGA,SAASC,YAAT;AAEA,eAAe,SAASC,SAAT,GAAqB;AAAA;;AAAA,oBAChBR,UAAU,CAACO,YAAD,CADM;AAAA,MAC1BE,KAD0B,eAC1BA,KAD0B;;AAAA,kBAEcV,QAAQ,CAAC,EAAD,CAFtB;AAAA;AAAA,MAE3BW,gBAF2B;AAAA,MAETC,mBAFS;;AASlCV,EAAAA,SAAS,CAAC,YAAM;AACdI,IAAAA,OAAO,CAACO,KAAR,GAAgBC,IAAhB,CAAqB,UAACC,YAAD,EAAkB;AACrCC,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCF,YAAY,CAACG,IAA/C;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCF,YAAY,CAACI,WAA7C;AACD,KAHD;;AAKA,QAAIJ,YAAY,CAACI,WAAb,KAA6B,IAAjC,EAAuC;AACrCZ,MAAAA,gBAAgB,CAACK,mBAAD,CAAhB;AACD;AACF,GATQ,EASN,EATM,CAAT;AAWA,MAAMQ,KAAK,GAAG,IAAIhB,KAAJ,CAAU;AACtBiB,IAAAA,SAAS,EAAE,OADW;AAEtBC,IAAAA,MAAM,EAAE;AACNC,MAAAA,UAAU,EAAE;AADN,KAFc;AAKtBC,IAAAA,OAAO,EAAEnB;AALa,GAAV,CAAd;;AAQA,MAAMoB,OAAO,GAAG,SAAVA,OAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAUA,MAAMC,WAAW,GAAG,SAAdA,WAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAGIN,KAAK,CAACO,MAAN,EAHJ;;AAAA;AAGZC,YAAAA,OAHY;AAIlBZ,YAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBW,OAAO,CAACC,IAAR,CAAaC,KAArC;;AAJkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApB;;AAQA,SACE,oBAAC,cAAD;AACE,IAAA,MAAM,EAAEpB,KAAK,CAACqB,qBADhB;AAEE,IAAA,KAAK,kCAAOC,MAAM,CAACC,SAAd;AAAyBC,MAAAA,eAAe,EAAExB,KAAK,CAACwB;AAAhD,MAFP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,kCAAOF,MAAM,CAACG,KAAd;AAAqBC,MAAAA,KAAK,EAAE1B,KAAK,CAAC0B;AAAlC,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAEE,oBAAC,MAAD;AACE,IAAA,KAAK,EAAC,MADR;AAEE,IAAA,OAAO,EAAE,mBAAM;AACbX,MAAAA,OAAO;AACR,KAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAQE,oBAAC,MAAD;AACE,IAAA,KAAK,EAAC,WADR;AAEE,IAAA,OAAO,EAAE,mBAAM;AACbC,MAAAA,WAAW;AACZ,KAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,EAcE,oBAAC,MAAD;AACE,IAAA,KAAK,EAAC,QADR;AAEE,IAAA,OAAO,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACDN,KAAK,CAACiB,QAAN,EADC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdF,CAJF,EAyBE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAE;AACLC,MAAAA,QAAQ,EAAE,UADL;AAELC,MAAAA,GAAG,EAAE,KAFA;AAGLC,MAAAA,KAAK,EAAE,KAHF;AAILC,MAAAA,aAAa,EAAE,KAJV;AAKLC,MAAAA,cAAc,EAAE;AALX,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEC,MAAAA,QAAQ,EAAE,EAAZ;AAAgBC,MAAAA,UAAU,EAAE,MAA5B;AAAoCR,MAAAA,KAAK,EAAE1B,KAAK,CAAC0B;AAAjD,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YATF,EAYE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEO,MAAAA,QAAQ,EAAE,EAAZ;AAAgBC,MAAAA,UAAU,EAAE,MAA5B;AAAoCR,MAAAA,KAAK,EAAE1B,KAAK,CAAC0B;AAAjD,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAZF,CAzBF,EA0CGzB,gBAAgB,CAACkC,GAAjB,CAAqB,UAACC,OAAD,EAAUC,KAAV;AAAA,WACpB,oBAAC,aAAD;AAAe,MAAA,GAAG,EAAEA,KAApB;AAA2B,MAAA,OAAO,EAAED,OAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADoB;AAAA,GAArB,CA1CH,CADF;AAgDD;;AAED,IAAME,aAAa,GAAG,SAAhBA,aAAgB,OAAiB;AAAA,MAAdF,OAAc,QAAdA,OAAc;;AAAA,qBACnB7C,UAAU,CAACO,YAAD,CADS;AAAA,MAC7BE,KAD6B,gBAC7BA,KAD6B;;AAErC,SACE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAE;AACL+B,MAAAA,aAAa,EAAE,KADV;AAELD,MAAAA,KAAK,EAAE,KAFF;AAGLF,MAAAA,QAAQ,EAAE,UAHL;AAILC,MAAAA,GAAG,EAAE,KAJA;AAKLG,MAAAA,cAAc,EAAE;AALX,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,EAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,kCAAOV,MAAM,CAACiB,QAAd;AAAwBb,MAAAA,KAAK,EAAE1B,KAAK,CAAC0B;AAArC,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGU,OAAO,CAACI,IADX,CADF,CATF,EAcE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEC,MAAAA,WAAW,EAAE;AAAf,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,kCAAOnB,MAAM,CAACoB,SAAd;AAAyBhB,MAAAA,KAAK,EAAE1B,KAAK,CAAC0B;AAAtC,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGU,OAAO,CAACO,KADX,CADF,CAdF,CADF;AAsBD,CAxBD;;AA0BA,IAAMrB,MAAM,GAAGsB,UAAU,CAACC,MAAX,CAAkB;AAC/BtB,EAAAA,SAAS,EAAE;AACTuB,IAAAA,IAAI,EAAE,CADG;AAETtB,IAAAA,eAAe,EAAE,SAFR;AAGTuB,IAAAA,UAAU,EAAE;AAHH,GADoB;AAM/BtB,EAAAA,KAAK,EAAE;AACLQ,IAAAA,QAAQ,EAAE,EADL;AAELC,IAAAA,UAAU,EAAE,MAFP;AAGLc,IAAAA,SAAS,EAAE;AAHN,GANwB;AAW/BT,EAAAA,QAAQ,EAAE;AACRN,IAAAA,QAAQ,EAAE,EADF;AAERC,IAAAA,UAAU,EAAE;AAFJ,GAXqB;AAe/BQ,EAAAA,SAAS,EAAE;AACTT,IAAAA,QAAQ,EAAE,EADD;AAETC,IAAAA,UAAU,EAAE;AAFH;AAfoB,CAAlB,CAAf","sourcesContent":["//REACT\nimport React, { useState, useContext, useEffect } from 'react'\nimport { View, Text, StyleSheet, Button } from 'react-native'\nimport { LinearGradient } from 'expo-linear-gradient'\nimport { Cache } from 'react-native-cache'\nimport { AsyncStorage } from 'react-native'\nimport NetInfo from '@react-native-community/netinfo'\n\n//FIREBASE\nimport { GetHighScoreList } from '../firebase/Firebase'\n\n//CONTEXT\nimport { ThemeContext } from '../context/ThemeContext'\n\nexport default function HighScore() {\n  const { theme } = useContext(ThemeContext)\n  const [highScorePlayers, setHighScorePlayers] = useState([])\n\n  /*  NetInfo.addEventListener((networkState) => {\n    console.log('Connection type - ', networkState.type)\n    console.log('Is connected? - ', networkState.isConnected)\n  }) */\n\n  useEffect(() => {\n    NetInfo.fetch().then((networkState) => {\n      console.log('Connection type - ', networkState.type)\n      console.log('Is connected? - ', networkState.isConnected)\n    })\n\n    if (networkState.isConnected === true) {\n      GetHighScoreList(setHighScorePlayers)\n    }\n  }, [])\n\n  const cache = new Cache({\n    namespace: 'myapp',\n    policy: {\n      maxEntries: 50000,\n    },\n    backend: AsyncStorage,\n  })\n\n  const Caching = async () => {\n    /*   console.log('EMil cach')\n    //await cache.set('key1', 'world')\n    await cache.set('key1', highScorePlayers) */\n    /*  NetInfo.fetch().then((networkState) => {\n      console.log('Connection type - ', networkState.type)\n      console.log('Is connected? - ', networkState.isConnected)\n    }) */\n  }\n\n  const ReadCaching = async () => {\n    /*  const value = await cache.get('key1')\n    console.log(value) */\n    const entries = await cache.getAll()\n    console.log('all cach', entries.key1.value)\n    //console.log('EMIL', highScorePlayers[1].name)\n    //console.log('EMIL här', highScorePlayers[1].name)\n  }\n  return (\n    <LinearGradient\n      colors={theme.linearBackgroundColor}\n      style={{ ...styles.container, backgroundColor: theme.backgroundColor }}\n    >\n      <View>\n        <Text style={{ ...styles.title, color: theme.color }}>HighScore</Text>\n        <Button\n          title=\"cach\"\n          onPress={() => {\n            Caching()\n          }}\n        ></Button>\n        <Button\n          title=\"read cach\"\n          onPress={() => {\n            ReadCaching()\n          }}\n        ></Button>\n        <Button\n          title=\"delete\"\n          onPress={async () => {\n            await cache.clearAll()\n          }}\n        ></Button>\n      </View>\n      <View\n        style={{\n          position: 'relative',\n          top: '20%',\n          width: '80%',\n          flexDirection: 'row',\n          justifyContent: 'space-between',\n        }}\n      >\n        <Text style={{ fontSize: 30, fontWeight: 'bold', color: theme.color }}>\n          Namn\n        </Text>\n        <Text style={{ fontSize: 30, fontWeight: 'bold', color: theme.color }}>\n          Score\n        </Text>\n      </View>\n\n      {highScorePlayers.map((element, index) => (\n        <HighScoreView key={index} element={element} />\n      ))}\n    </LinearGradient>\n  )\n}\n\nconst HighScoreView = ({ element }) => {\n  const { theme } = useContext(ThemeContext)\n  return (\n    <View\n      style={{\n        flexDirection: 'row',\n        width: '80%',\n        position: 'relative',\n        top: '25%',\n        justifyContent: 'space-between',\n      }}\n    >\n      <View style={{}}>\n        <Text style={{ ...styles.userName, color: theme.color }}>\n          {element.name}\n        </Text>\n      </View>\n      <View style={{ marginRight: 30 }}>\n        <Text style={{ ...styles.userScore, color: theme.color }}>\n          {element.score}\n        </Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#146B66',\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 40,\n    fontWeight: 'bold',\n    marginTop: 15,\n  },\n  userName: {\n    fontSize: 22,\n    fontWeight: '600',\n  },\n  userScore: {\n    fontSize: 22,\n    fontWeight: '600',\n  },\n})\n"]},"metadata":{},"sourceType":"module"}