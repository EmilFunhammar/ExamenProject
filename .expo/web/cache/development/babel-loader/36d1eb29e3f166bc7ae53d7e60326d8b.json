{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _jsxFileName = \"/Users/lanedator/Documents/GitHub/ExamenProject/screens/participantScreen.js\",\n    _this2 = this;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { LinearGradient } from 'expo-linear-gradient';\nimport React, { useEffect, useState, useContext } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { useNavigation } from '@react-navigation/native';\nimport { GetQuestionInfo, SnapShotUsers, SnapShotStartGame, StartGame, addUserAnswer } from \"../firebase/Firebase\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport { ThemeContext } from \"../context/ThemeContext\";\nexport default function JoinGame(_ref) {\n  var _this = this;\n\n  var route = _ref.route;\n\n  var _useContext = useContext(AuthContext),\n      user = _useContext.user;\n\n  var _useContext2 = useContext(ThemeContext),\n      theme = _useContext2.theme;\n\n  var navigation = useNavigation();\n  var gameKey = route.params.gameKey;\n\n  var _useState = useState(['']),\n      _useState2 = _slicedToArray(_useState, 2),\n      userArray = _useState2[0],\n      setUserArray = _useState2[1];\n\n  var _useState3 = useState(['']),\n      _useState4 = _slicedToArray(_useState3, 2),\n      questionArray = _useState4[0],\n      setQuestionArray = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      shouldShow = _useState6[0],\n      setShouldShow = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      startGame = _useState8[0],\n      setStartGame = _useState8[1];\n\n  var _useState9 = useState(true),\n      _useState10 = _slicedToArray(_useState9, 2),\n      useEffectSub = _useState10[0],\n      setUseEffectSub = _useState10[1];\n\n  useEffect(function () {\n    SnapShotUsers(setUserArray, gameKey);\n    SnapShotStartGame(setStartGame, gameKey);\n    GetQuestionInfo(setQuestionArray, gameKey);\n  }, []);\n  useEffect(function () {\n    if (useEffectSub) {\n      userArray.forEach(function (element) {\n        if (user.email === element.userEmail) {\n          if (element.host) {\n            console.log('true i isHost');\n            return setShouldShow(true);\n          } else {\n            console.log('false i isHost');\n            return setShouldShow(false);\n          }\n        }\n      });\n    }\n  }, [userArray]);\n  useEffect(function () {\n    if (startGame) {\n      setUseEffectSub(false);\n      navigation.navigate('GameScreen', {\n        questionArray: questionArray,\n        gameKey: gameKey\n      });\n    } else {\n      console.log(startGame);\n    }\n  }, [startGame]);\n  return React.createElement(LinearGradient, {\n    colors: theme.linearBackgroundColor,\n    style: _objectSpread(_objectSpread({}, styles.container), {}, {\n      backgroundColor: theme.backgroundColor\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.participantView,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.participantTextHeader,\n    onPress: function onPress() {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, \"Participants\"), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, \"Game key:\"), React.createElement(Text, {\n    style: styles.gameKey,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, gameKey), userArray.map(function (element, index) {\n    return React.createElement(ParticipantView, {\n      key: index,\n      element: element.userDisplayName,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }\n    });\n  })), shouldShow ? React.createElement(TouchableOpacity, {\n    style: _objectSpread(_objectSpread({}, styles.button), {}, {\n      backgroundColor: theme.linearButton\n    }),\n    onPress: function onPress() {\n      StartGame(gameKey);\n      addUserAnswer(gameKey, userArray, user);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: _objectSpread(_objectSpread({}, styles.buttonText), {}, {\n      color: theme.linearButtonText\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }, \"Start Game\")) : null);\n}\n\nvar ParticipantView = function ParticipantView(_ref2) {\n  var element = _ref2.element;\n  return React.createElement(React.Fragment, null, React.createElement(Text, {\n    style: styles.participantText,\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }, element), React.createElement(View, {\n    style: styles.underLineView,\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    backgroundColor: '#146B66'\n  },\n  button1: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '80%',\n    height: '10%',\n    backgroundColor: '#AFEFDF',\n    marginBottom: 100,\n    borderRadius: 20\n  },\n  buttonText: {\n    fontSize: 30,\n    fontWeight: '600'\n  },\n  underLineView: {\n    height: 3,\n    backgroundColor: 'black',\n    marginTop: 3,\n    width: '60%'\n  },\n  participantText: {\n    fontWeight: '500',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 15,\n    letterSpacing: 4,\n    fontSize: 22\n  },\n  participantTextHeader: {\n    fontWeight: 'bold',\n    fontSize: 30,\n    marginBottom: 20\n  },\n  participantView: {\n    width: '100%',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 200\n  },\n  button: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#AFEFDF',\n    width: '80%',\n    height: '10%',\n    marginBottom: 100,\n    borderRadius: 20,\n    shadowColor: 'white',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.5,\n    shadowRadius: 20\n  },\n  gameKey: {\n    fontSize: 18,\n    marginBottom: 10,\n    fontWeight: '600'\n  }\n});","map":{"version":3,"sources":["/Users/lanedator/Documents/GitHub/ExamenProject/screens/participantScreen.js"],"names":["LinearGradient","React","useEffect","useState","useContext","useNavigation","GetQuestionInfo","SnapShotUsers","SnapShotStartGame","StartGame","addUserAnswer","AuthContext","ThemeContext","JoinGame","route","user","theme","navigation","gameKey","params","userArray","setUserArray","questionArray","setQuestionArray","shouldShow","setShouldShow","startGame","setStartGame","useEffectSub","setUseEffectSub","forEach","element","email","userEmail","host","console","log","navigate","linearBackgroundColor","styles","container","backgroundColor","participantView","participantTextHeader","map","index","userDisplayName","button","linearButton","buttonText","color","linearButtonText","ParticipantView","participantText","underLineView","StyleSheet","create","flex","alignItems","justifyContent","button1","width","height","marginBottom","borderRadius","fontSize","fontWeight","marginTop","letterSpacing","shadowColor","shadowOffset","shadowOpacity","shadowRadius"],"mappings":"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","sourcesContent":["import { LinearGradient } from 'expo-linear-gradient';\nimport React, { useEffect, useState, useContext } from 'react';\nimport { StyleSheet, Text, View, TouchableOpacity } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport {\n  GetQuestionInfo,\n  SnapShotUsers,\n  SnapShotStartGame,\n  StartGame,\n  addUserAnswer,\n} from '../firebase/Firebase';\n\n// CONTEXTS\nimport { AuthContext } from '../context/AuthContext';\nimport { ThemeContext } from '../context/ThemeContext';\n\nexport default function JoinGame({ route }) {\n  const { user } = useContext(AuthContext);\n  const { theme } = useContext(ThemeContext);\n  const navigation = useNavigation();\n  const { gameKey } = route.params;\n  const [userArray, setUserArray] = useState(['']);\n  const [questionArray, setQuestionArray] = useState(['']);\n  const [shouldShow, setShouldShow] = useState(false);\n  const [startGame, setStartGame] = useState(false);\n  const [useEffectSub, setUseEffectSub] = useState(true);\n\n  /*   const SnapShots = () => {\n    SnapShotUsers(setUserArray, gameKey);\n    SnapShotStartGame(setStartGame, gameKey);\n  }; */\n  useEffect(() => {\n    SnapShotUsers(setUserArray, gameKey);\n    SnapShotStartGame(setStartGame, gameKey);\n    GetQuestionInfo(setQuestionArray, gameKey);\n    //isHost();\n  }, []);\n\n  useEffect(() => {\n    //let juseEffectSub = true;\n    if (useEffectSub) {\n      userArray.forEach((element) => {\n        if (user.email === element.userEmail) {\n          if (element.host) {\n            console.log('true i isHost');\n            return setShouldShow(true);\n          } else {\n            console.log('false i isHost');\n            return setShouldShow(false);\n          }\n        }\n      });\n    }\n  }, [userArray]);\n\n  useEffect(() => {\n    if (startGame) {\n      setUseEffectSub(false);\n      navigation.navigate('GameScreen', {\n        questionArray: questionArray,\n        gameKey: gameKey,\n      });\n    } else {\n      console.log(startGame);\n    }\n  }, [startGame]);\n\n  return (\n    <LinearGradient\n      colors={theme.linearBackgroundColor}\n      style={{ ...styles.container, backgroundColor: theme.backgroundColor }}\n    >\n      <View style={styles.participantView}>\n        <Text\n          style={styles.participantTextHeader}\n          onPress={() => {\n            /*   for (let index = 0; index < questionAnswersArray.length; index++) {\n              questionAnswersArray[index].Answers.sort(\n                () => Math.random() - 0.5\n              );\n            } */\n            //GetQuestionInfo(setQuestionArray, gameKey);\n            //isHost();\n          }}\n        >\n          Participants\n        </Text>\n        <Text>Game key:</Text>\n        <Text style={styles.gameKey}>{gameKey}</Text>\n\n        {userArray.map((element, index) => (\n          <ParticipantView key={index} element={element.userDisplayName} />\n        ))}\n      </View>\n      {shouldShow ? (\n        <TouchableOpacity\n          style={{ ...styles.button, backgroundColor: theme.linearButton }}\n          onPress={() => {\n            StartGame(gameKey);\n            addUserAnswer(gameKey, userArray, user);\n            /* navigation.navigate('GameScreen', {\n              questionArray: questionArray,\n              gameKey: gameKey,\n            }); */\n          }}\n        >\n          <Text style={{ ...styles.buttonText, color: theme.linearButtonText }}>\n            Start Game\n          </Text>\n        </TouchableOpacity>\n      ) : null}\n\n      {/*  <TouchableOpacity\n        style={styles.button}\n        onPress={() => {\n          navigation.navigate('GameScreen', {\n            questionArray: questionArray,\n            gameKey: gameKey,\n          });\n        }}\n      >\n        <Text style={styles.buttonText}>Start Game</Text>\n      </TouchableOpacity> */}\n    </LinearGradient>\n  );\n}\n\nconst ParticipantView = ({ element }) => {\n  return (\n    <>\n      <Text style={styles.participantText}>{element}</Text>\n      <View style={styles.underLineView} />\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    backgroundColor: '#146B66',\n  },\n  button1: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '80%',\n    height: '10%',\n    backgroundColor: '#AFEFDF',\n    marginBottom: 100,\n    borderRadius: 20,\n  },\n  buttonText: {\n    fontSize: 30,\n    fontWeight: '600',\n  },\n  underLineView: {\n    height: 3,\n    backgroundColor: 'black',\n    marginTop: 3,\n    width: '60%',\n  },\n  participantText: {\n    fontWeight: '500',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 15,\n    letterSpacing: 4,\n    fontSize: 22,\n  },\n  participantTextHeader: {\n    fontWeight: 'bold',\n    fontSize: 30,\n    marginBottom: 20,\n  },\n  participantView: {\n    width: '100%',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 200,\n  },\n  button: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#AFEFDF',\n    width: '80%',\n    height: '10%',\n    marginBottom: 100,\n    borderRadius: 20,\n    shadowColor: 'white',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.5,\n    shadowRadius: 20,\n  },\n  gameKey: {\n    fontSize: 18,\n    marginBottom: 10,\n    fontWeight: '600',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}