{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/oo/Desktop/APPutvekling/ExamenProject/context/ThemeContext.js\";\nimport React, { createContext, useState } from 'react';\nimport schemes from \"../resources/Schemes\";\nexport var ThemeContext = createContext();\nexport default function ThemeContextProvider(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState(schemes.MYLI1),\n      _useState2 = _slicedToArray(_useState, 2),\n      theme = _useState2[0],\n      setTheme = _useState2[1];\n\n  var toggleTheme = function toggleTheme(value) {\n    setTheme(value);\n  };\n\n  return React.createElement(ThemeContext.Provider, {\n    value: {\n      theme: theme,\n      toggleTheme: toggleTheme\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 5\n    }\n  }, children);\n}","map":{"version":3,"sources":["/Users/oo/Desktop/APPutvekling/ExamenProject/context/ThemeContext.js"],"names":["React","createContext","useState","schemes","ThemeContext","ThemeContextProvider","children","MYLI1","theme","setTheme","toggleTheme","value"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,QAA+C,OAA/C;AACA,OAAOC,OAAP;AAEA,OAAO,IAAMC,YAAY,GAAGH,aAAa,EAAlC;AAEP,eAAe,SAASI,oBAAT,OAA4C;AAAA,MAAZC,QAAY,QAAZA,QAAY;;AAAA,kBAC/BJ,QAAQ,CAACC,OAAO,CAACI,KAAT,CADuB;AAAA;AAAA,MAClDC,KADkD;AAAA,MAC3CC,QAD2C;;AAGzD,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAW;AAC7BF,IAAAA,QAAQ,CAACE,KAAD,CAAR;AACD,GAFD;;AAIA,SACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEH,MAAAA,KAAK,EAALA,KAAF;AAASE,MAAAA,WAAW,EAAXA;AAAT,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,QADH,CADF;AAKD","sourcesContent":["import React, { createContext, useState } from 'react';\nimport schemes from '../resources/Schemes';\n\nexport const ThemeContext = createContext();\n\nexport default function ThemeContextProvider({ children }) {\n  const [theme, setTheme] = useState(schemes.MYLI1);\n\n  const toggleTheme = (value) => {\n    setTheme(value);\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}