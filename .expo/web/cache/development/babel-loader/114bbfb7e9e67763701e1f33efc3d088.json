{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _jsxFileName = \"/Users/lanedator/Documents/GitHub/ExamenProject/src/screens/highscoreScreen.js\",\n    _this2 = this;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useContext, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Touchable from \"react-native-web/dist/exports/Touchable\";\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { Cache } from 'react-native-cache';\nimport { AsyncStorage } from \"react-native-web/dist/index\";\nimport NetInfo from '@react-native-community/netinfo';\nimport { useNavigation } from '@react-navigation/native';\nimport { GetHighScoreList } from \"../firebase/Firebase\";\nimport { ThemeContext } from \"../context/ThemeContext\";\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nexport default function HighScore() {\n  var _this = this;\n\n  var navigation = useNavigation();\n\n  var _useContext = useContext(ThemeContext),\n      theme = _useContext.theme;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      highScorePlayers = _useState2[0],\n      setHighScorePlayers = _useState2[1];\n\n  useEffect(function () {\n    NetInfo.fetch().then(function (networkState) {\n      if (networkState.isConnected == true) {\n        GetHighScoreList(setHighScorePlayers);\n      } else if (networkState.isConnected == false) {\n        ReadCaching();\n      }\n    });\n  }, []);\n  var cache = new Cache({\n    namespace: 'FrÃ¥geSpelet',\n    policy: {\n      maxEntries: 50000\n    },\n    backend: AsyncStorage\n  });\n\n  var Caching = function Caching() {\n    return _regeneratorRuntime.async(function Caching$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(cache.set('HighScoreList', highScorePlayers));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var ReadCaching = function ReadCaching() {\n    var value;\n    return _regeneratorRuntime.async(function ReadCaching$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(cache.get('HighScoreList'));\n\n          case 2:\n            value = _context2.sent;\n            setHighScorePlayers(value);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(LinearGradient, {\n    colors: theme.linearBackgroundColor,\n    style: _objectSpread(_objectSpread({}, styles.container), {}, {\n      backgroundColor: theme.backgroundColor\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: _objectSpread(_objectSpread({}, styles.title), {}, {\n      color: theme.color\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, \"HighScore\")), React.createElement(View, {\n    style: {\n      position: 'relative',\n      top: '20%',\n      width: '80%',\n      flexDirection: 'row',\n      justifyContent: 'space-between'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: {\n      fontSize: 30,\n      fontWeight: 'bold',\n      color: theme.color\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, \"Namn\"), React.createElement(Text, {\n    style: {\n      fontSize: 30,\n      fontWeight: 'bold',\n      color: theme.color\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, \"Score\")), highScorePlayers.map(function (element, index) {\n    return React.createElement(HighScoreView, {\n      key: index,\n      element: element,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }\n    });\n  }), React.createElement(View, {\n    style: {\n      position: 'relative',\n      top: 400,\n      width: '80%',\n      height: '8%',\n      borderRadius: 20,\n      shadowColor: 'black',\n      justifyContent: 'center',\n      alignItems: 'center',\n      backgroundColor: theme.linearButton\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      Caching();\n      navigation.navigate('home');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: theme.linearButtonText,\n      fontSize: 22\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  }, \"Home Page\"))));\n}\n\nvar HighScoreView = function HighScoreView(_ref) {\n  var element = _ref.element;\n\n  var _useContext2 = useContext(ThemeContext),\n      theme = _useContext2.theme;\n\n  return React.createElement(View, {\n    style: {\n      flexDirection: 'row',\n      width: '80%',\n      position: 'relative',\n      top: '25%',\n      justifyContent: 'space-between'\n    },\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: {},\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: _objectSpread(_objectSpread({}, styles.userName), {}, {\n      color: theme.color\n    }),\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }, element.name)), React.createElement(View, {\n    style: {\n      marginRight: 30\n    },\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: _objectSpread(_objectSpread({}, styles.userScore), {}, {\n      color: theme.color\n    }),\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }, element.score)));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#146B66',\n    alignItems: 'center',\n    width: '100%'\n  },\n  title: {\n    fontSize: 40,\n    fontWeight: 'bold',\n    marginTop: 15\n  },\n  userName: {\n    fontSize: 22,\n    fontWeight: '600'\n  },\n  userScore: {\n    fontSize: 22,\n    fontWeight: '600'\n  }\n});","map":{"version":3,"sources":["/Users/lanedator/Documents/GitHub/ExamenProject/src/screens/highscoreScreen.js"],"names":["React","useState","useContext","useEffect","LinearGradient","Cache","AsyncStorage","NetInfo","useNavigation","GetHighScoreList","ThemeContext","TouchableOpacity","HighScore","navigation","theme","highScorePlayers","setHighScorePlayers","fetch","then","networkState","isConnected","ReadCaching","cache","namespace","policy","maxEntries","backend","Caching","set","get","value","linearBackgroundColor","styles","container","backgroundColor","title","color","position","top","width","flexDirection","justifyContent","fontSize","fontWeight","map","element","index","height","borderRadius","shadowColor","alignItems","linearButton","navigate","linearButtonText","HighScoreView","userName","name","marginRight","userScore","score","StyleSheet","create","flex","marginTop"],"mappings":"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","sourcesContent":["//REACT\nimport React, { useState, useContext, useEffect } from 'react'\nimport { View, Text, StyleSheet, Button, Touchable } from 'react-native'\nimport { LinearGradient } from 'expo-linear-gradient'\nimport { Cache } from 'react-native-cache'\nimport { AsyncStorage } from 'react-native'\nimport NetInfo from '@react-native-community/netinfo'\nimport { useNavigation } from '@react-navigation/native'\n\n//FIREBASE\nimport { GetHighScoreList } from '../firebase/Firebase'\n\n//CONTEXT\nimport { ThemeContext } from '../context/ThemeContext'\nimport { TouchableOpacity } from 'react-native-gesture-handler'\n\nexport default function HighScore() {\n  const navigation = useNavigation()\n  const { theme } = useContext(ThemeContext)\n  const [highScorePlayers, setHighScorePlayers] = useState([])\n\n  useEffect(() => {\n    NetInfo.fetch().then((networkState) => {\n      // CHECKS FOR NETWORK AND USE CACHE IF NO NETWORK\n      if (networkState.isConnected == true) {\n        GetHighScoreList(setHighScorePlayers)\n      } else if (networkState.isConnected == false) {\n        ReadCaching()\n      }\n    })\n  }, [])\n\n  const cache = new Cache({\n    namespace: 'FrÃ¥geSpelet',\n    policy: {\n      maxEntries: 50000,\n    },\n    backend: AsyncStorage,\n  })\n  //CACHING THE HIGHSCORE LIST\n  const Caching = async () => {\n    await cache.set('HighScoreList', highScorePlayers)\n  }\n  //GET THE CACH BY ID AND SETS THE STATEE TO RETURND CACH VALUE\n  const ReadCaching = async () => {\n    const value = await cache.get('HighScoreList')\n    setHighScorePlayers(value)\n  }\n  return (\n    <LinearGradient\n      colors={theme.linearBackgroundColor}\n      style={{ ...styles.container, backgroundColor: theme.backgroundColor }}\n    >\n      <View>\n        <Text style={{ ...styles.title, color: theme.color }}>HighScore</Text>\n        {/*    <Button\n          title=\"cach\"\n          onPress={() => {\n            Caching()\n          }}\n        ></Button>\n        <Button\n          title=\"read cach\"\n          onPress={() => {\n            ReadCaching()\n          }}\n        ></Button> */}\n        {/*   <Button\n          title=\"delete\"\n          onPress={async () => {\n            await cache.clearAll()\n          }}\n        ></Button> */}\n      </View>\n      <View\n        style={{\n          position: 'relative',\n          top: '20%',\n          width: '80%',\n          flexDirection: 'row',\n          justifyContent: 'space-between',\n        }}\n      >\n        <Text style={{ fontSize: 30, fontWeight: 'bold', color: theme.color }}>\n          Namn\n        </Text>\n        <Text style={{ fontSize: 30, fontWeight: 'bold', color: theme.color }}>\n          Score\n        </Text>\n      </View>\n\n      {highScorePlayers.map((element, index) => (\n        <HighScoreView key={index} element={element} />\n      ))}\n      <View\n        style={{\n          position: 'relative',\n          top: 400,\n          width: '80%',\n          height: '8%',\n          borderRadius: 20,\n          shadowColor: 'black',\n          justifyContent: 'center',\n          alignItems: 'center',\n          backgroundColor: theme.linearButton,\n        }}\n      >\n        <TouchableOpacity\n          onPress={() => {\n            //UPDATES CACHE\n            Caching()\n            navigation.navigate('home')\n          }}\n        >\n          <Text style={{ color: theme.linearButtonText, fontSize: 22 }}>\n            Home Page\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </LinearGradient>\n  )\n}\n\nconst HighScoreView = ({ element }) => {\n  const { theme } = useContext(ThemeContext)\n  return (\n    <View\n      style={{\n        flexDirection: 'row',\n        width: '80%',\n        position: 'relative',\n        top: '25%',\n        justifyContent: 'space-between',\n      }}\n    >\n      <View style={{}}>\n        <Text style={{ ...styles.userName, color: theme.color }}>\n          {element.name}\n        </Text>\n      </View>\n      <View style={{ marginRight: 30 }}>\n        <Text style={{ ...styles.userScore, color: theme.color }}>\n          {element.score}\n        </Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#146B66',\n    alignItems: 'center',\n    width: '100%',\n  },\n  title: {\n    fontSize: 40,\n    fontWeight: 'bold',\n    marginTop: 15,\n  },\n  userName: {\n    fontSize: 22,\n    fontWeight: '600',\n  },\n  userScore: {\n    fontSize: 22,\n    fontWeight: '600',\n  },\n})\n"]},"metadata":{},"sourceType":"module"}